# Generated by Django 3.2 on 2021-06-18 15:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True)),
                ('nickname', models.CharField(blank=True, max_length=50, null=True)),
                ('user_level', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'authuser',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('gameid', models.AutoField(db_column='gameID', primary_key=True, serialize=False)),
                ('gamename', models.CharField(db_column='gameName', max_length=50)),
                ('datereleased', models.DateField(blank=True, db_column='dateReleased', null=True)),
                ('gamedescription', models.CharField(blank=True, db_column='gameDescription', max_length=500, null=True)),
            ],
            options={
                'db_table': 'game',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genreid', models.AutoField(db_column='genreID', primary_key=True, serialize=False)),
                ('genre', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'genre',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Playstorehistory',
            fields=[
                ('playstorerow', models.AutoField(db_column='playStoreRow', primary_key=True, serialize=False)),
                ('gameid', models.IntegerField(db_column='gameID')),
                ('gameprice', models.DecimalField(db_column='gamePrice', decimal_places=2, max_digits=18)),
                ('discount', models.FloatField(blank=True, null=True)),
                ('dateadded', models.DateField(blank=True, db_column='dateAdded', null=True)),
            ],
            options={
                'db_table': 'playstorehistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Playstore',
            fields=[
                ('playstorerow', models.AutoField(db_column='playStoreRow', primary_key=True, serialize=False)),
                ('gameprice', models.DecimalField(db_column='gamePrice', decimal_places=2, max_digits=18)),
                ('discount', models.FloatField(blank=True, db_column='discount', null=True)),
                ('dateadded', models.DateField(blank=True, db_column='dateAdded', null=True)),
                ('game', models.ForeignKey(db_column='game', null=True, on_delete=django.db.models.deletion.CASCADE, to='authent.game')),
            ],
            options={
                'db_table': 'playstore',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Gamegenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gameid', models.ForeignKey(db_column='gameID', on_delete=django.db.models.deletion.CASCADE, to='authent.game')),
                ('genreid', models.ForeignKey(db_column='genreID', on_delete=django.db.models.deletion.CASCADE, to='authent.genre')),
            ],
            options={
                'db_table': 'gamegenre',
                'managed': True,
                'unique_together': {('genreid', 'gameid')},
            },
        ),
        migrations.AddField(
            model_name='game',
            name='genres',
            field=models.ManyToManyField(through='authent.Gamegenre', to='authent.Genre'),
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gameid', models.ForeignKey(db_column='gameID', on_delete=django.db.models.deletion.CASCADE, to='authent.game')),
                ('userid', models.ForeignKey(db_column='userID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wishlist',
                'managed': True,
                'unique_together': {('gameid', 'userid')},
            },
        ),
        migrations.CreateModel(
            name='Gamelibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('totaltimeplayed', models.IntegerField(blank=True, db_column='totalTimePlayed', null=True)),
                ('lasttimeplayed', models.DateField(blank=True, db_column='lastTimePlayed', null=True)),
                ('gameid', models.ForeignKey(db_column='gameID', on_delete=django.db.models.deletion.CASCADE, to='authent.game')),
                ('userid', models.ForeignKey(db_column='userID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'gamelibrary',
                'managed': True,
                'unique_together': {('gameid', 'userid')},
            },
        ),
        migrations.CreateModel(
            name='Friendlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend', models.ForeignKey(db_column='friendID', on_delete=django.db.models.deletion.CASCADE, related_name='friends', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_column='userID', on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'friendlist',
                'managed': True,
                'unique_together': {('user', 'friend')},
            },
        ),
    ]
